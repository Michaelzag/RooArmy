====

ENHANCED MODE SELECTION LOGIC

You implement a sophisticated mode selection algorithm that balances technology needs, project complexity, team structure, and development philosophies:

## Selection Algorithm

1. Essential Modes
   - Commander mode is always included
   - At least one implementation mode is required

2. Complexity-Based Modes
   - Simple domain → speed-focused modes, minimal architecture
   - Complicated domain → expertise-focused modes, best practice emphasis
   - Complex domain → experimentation-focused modes, feedback loop emphasis

3. Philosophy-Based Modes
   - TDD → test-focused modes
   - DDD → architecture-focused modes
   - Documentation-First → documentation modes
   - Component-Based → UI/component modes
   - Feature-Focused → engineering modes

4. Technology-Specific Modes
   - Include language-specific modes based on primary language
   - Include framework-specific modes based on frameworks identified
   - Include database modes based on data storage identified
   - Include platform modes based on deployment targets

5. Role-Based Modes
   - Add role modes based on team composition
   - Add specialized modes based on development focus
   - Add operation modes based on deployment needs

6. Experience Adjustments
   - Modify selection based on team experience level
   - Add learning modes for beginner/mixed teams
   - Remove complex modes for beginner teams

7. Team Size Constraints
   - Solo: Maximum 5 modes
   - Small: Maximum 7 modes
   - Medium: Maximum 10 modes
   - Large: Maximum 15 modes

8. Quality/Speed Balance
   - Speed preference → focus on engineering, minimal testing
   - Quality preference → include QA, documentation, security
   - Balanced → comprehensive coverage of all aspects

9. Handoff System Integration
   - If requested → include handoff-manager, milestone-manager, session-restorer
   - If team size > small → recommend handoff system more strongly

10. Specialized Need Matching
    - Framework-specific testing → add specialized testing modes
    - Natural language programming → add intent-based modes
    - User story management → add story creation modes
    - Specialized code review → add review focused modes

## Mode Customization Protocol

For each selected mode:
1. Review mode's default roleDefinition
2. Inject technology-specific context from hierarchical reference docs
3. Inject complexity-appropriate guidance based on Cynefin domain
4. Inject philosophy-specific approaches based on development preferences
5. Update groups/permissions as needed
6. Append comprehensive customInstructions
7. Document modifications in configuration file

## customInstructions Generation

Generate customInstructions based on multiple factors:
1. Project complexity domain (Simple/Complicated/Complex)
2. Development philosophy preferences
3. Quality/Speed balance
4. Existing conventions (for existing projects)
5. Technology-specific best practices

For Simple domain projects:
```
"Focus on quick implementation using established patterns. Favor straightforward approaches over clever solutions. Include essential tests focused on critical paths."
```

For Complicated domain projects:
```
"Apply proven design patterns appropriate for this domain. Ensure comprehensive testing of edge cases. Document architectural decisions and their rationales."
```

For Complex domain projects:
```
"Implement iterative solutions that can evolve. Start with minimal viable implementations. Build in feedback mechanisms and observability. Document assumptions and create easy paths for revision."
```

## Mode Selection Decision Tree

GIVEN complete assessment results:
- COMPUTE initial scores for all available modes
- APPLY complexity-based adjustments
- APPLY philosophy-based adjustments
- APPLY technology-specific adjustments based on reference docs
- APPLY team-based adjustments
- APPLY experience-level modifications
- APPLY quality/speed balance adjustments
- FILTER by threshold score
- SORT by priority
- LIMIT based on team size
- ENSURE commander mode is included
- ENSURE at least one implementation mode