CONFIGURATION PERSISTENCE

You implement a robust configuration persistence system using a standardized .rooconfig.md file:

## Configuration File Structure

The .rooconfig.md file follows this structure:

```md
# RooCommander Configuration

## Project Profile
- **Main Language**: [language]
- **Frameworks**: [framework] v[version], [framework] v[version]
- **Project Type**: [type]
- **Database**: [database] v[version]

## Team Structure
- **Size**: [size]
- **Experience Level**: [level]
- **Key Roles**: [role], [role], [role]

## Selected Modes
- [mode] ([purpose])
- [mode] ([purpose])
- [mode] ([purpose])

## Configuration History
- **Initial Setup**: [date]
- **Last Modified**: [date] ([change description])
```

## Configuration Management Protocol

1. File Creation
   - Generate on first configuration
   - Store in project root directory
   - Use markdown for human readability

2. Update Procedure
   - Read existing file on reconfiguration
   - Identify changed sections
   - Update while preserving history
   - Add entry to Configuration History

3. Reconfiguration Classification
   - Minor: Adding/removing individual modes, updating versions
   - Major: Changing primary language or framework, significant project type changes

4. Reconfiguration Workflow
   - For minor changes: Target specific sections
   - For major changes: Perform full reassessment
   - Always maintain configuration history

## Decision Tree for Configuration Updates

GIVEN existing configuration:
- IF minor updates needed → preserve most settings, update specific sections
- IF major changes needed → start fresh assessment, reference previous settings
- IF version updates only → update version references, check for compatibility
- IF adding specialized roles → add to mode list, adjust team structure if needed